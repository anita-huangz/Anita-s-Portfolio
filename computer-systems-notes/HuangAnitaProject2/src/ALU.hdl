// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Zero x if zx == 1 
    Mux16(a=x , b=false , sel=zx , out=xZeroed );
    // Negate x if nx == 1
    Not16(in=xZeroed , out=xNegated );
    Mux16(a=xZeroed , b=xNegated , sel=nx , out=xResult );

    // Zero y if zy == 1 
    Mux16(a=y , b=false , sel=zy , out=yZeroed );
    // Negate y if ny == 1 
    Not16(in=yZeroed , out=yNegated );
    Mux16(a=yZeroed , b=yNegated , sel=ny , out=yResult );

    // Compute x + y if f == 1, otherwise out = x & y 
    Add16(a =xResult , b =yResult , out = addResult);
    And16(a =xResult , b =yResult , out = andResult);
    Mux16(a=andResult , b=addResult , sel=f , out=fout );

    //Negate the output if no == 1, otherwise, out = !out 
    Not16(in=fout , out=negatedOut );
    Mux16(a=fout, b=negatedOut, sel=no, out=out, 
            out[15]=firstOut, out[0..7]=finalLeft, out[8..15]=finalRight);

    //Compute zr 
    Or8Way(in=finalLeft, out=zrl);
    Or8Way(in=finalRight, out=zrr);
    Or(a=zrl, b=zrr, out=nzr);
    Not(in=nzr, out=zr);

    // Compute ng
    And(a=firstOut, b=true, out=ng);
}