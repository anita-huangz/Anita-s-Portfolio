// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // 1. Instruction Decoding 
    Not(in=instruction[15] , out=instA );
    Not(in=instA , out=instC );
    /// Instruction[3..5]
    And(a=instC , b=instruction[4] , out=loadD ); // Load D resgiter 
    And(a=instC , b=instruction[5] , out=destA ); // Load A register 
    Or(a=instA , b=destA , out=loadA );
    /// Memory-related signals (Instruction[3]) 
    And(a=instC , b=instruction[3] , out=loadM, out=writeM );
    /// ALU y-input source (Instruction[12]) 
    And(a=instC , b=instruction[12] , out=AMtoALU );

    // 2. ALU Operations 
    Mux16(a=outALU , b=instruction , sel=instA , out=inA );
    ALU(x=outD , y=outAM , zx=instruction[11] , nx=instruction[10] , 
        zy=instruction[9] , ny=instruction[8] , f=instruction[7] , 
        no=instruction[6] , out=outM , out=outALU, zr=zr , ng=ng );
    Mux16(a=outA , b=inM , sel=AMtoALU , out=outAM );

    // 3. Resgiters 
    ARegister(in=inA , load=loadA , out=outA, out[0..14]=addressM );
    DRegister(in=outALU , load=loadD , out=outD );
    PC(in=outA , load=loadPC , inc=true , reset=reset , out[0..14]=pc );

    // 4. Jump Logic (Instruction[0..2]) 
    /// JGT - ALU result > 0: 
    Or(a=zr , b=ng , out=temp1 );
    Not(in=temp1 , out=pos );
    And(a=instruction[0] , b=pos , out=JGT );
    /// JEQ - ALU result = 0 
    And(a=instruction[1] , b=zr , out=JEQ );
    /// JLT - ALU result < 0: 
    And(a=instruction[2] , b=ng , out=JLT );
    /// Aggregate jump conditions 
    // JGE
    Or(a=JGT , b=JEQ , out=JGE );
    // JNE
    Or(a=JGT , b=JLT , out=JNE );
    // JLE
    Or(a=JEQ , b=JLT , out=JLE );
    // JMP
    Or(a=JGT , b=JLE , out=JMP );
    Or8Way(in[0]=JGT, in[1]=JEQ, in[2]=JLT, in[3]=JGE, in[4]=JNE, 
            in[5]=JLE, in[6]=JMP, in[7]=false, out=J);
            And(a=instC , b=J , out=loadPC );
}